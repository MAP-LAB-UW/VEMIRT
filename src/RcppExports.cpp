// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calcu_eta_
void calcu_eta_(arma::mat& eta, arma::mat ksi, const arma::Mat<int>& y, const arma::Mat<int>& z, const arma::Col<int>& R, const int ind);
RcppExport SEXP _VEMIRT_calcu_eta_(SEXP etaSEXP, SEXP ksiSEXP, SEXP ySEXP, SEXP zSEXP, SEXP RSEXP, SEXP indSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type ksi(ksiSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type z(zSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const int >::type ind(indSEXP);
    calcu_eta_(eta, ksi, y, z, R, ind);
    return R_NilValue;
END_RCPP
}
// update_sigma_i
arma::mat update_sigma_i(const arma::mat& omega, const arma::mat& A, const arma::rowvec& eta1_i, const arma::rowvec& eta2_i);
RcppExport SEXP _VEMIRT_update_sigma_i(SEXP omegaSEXP, SEXP ASEXP, SEXP eta1_iSEXP, SEXP eta2_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eta1_i(eta1_iSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eta2_i(eta2_iSEXP);
    rcpp_result_gen = Rcpp::wrap(update_sigma_i(omega, A, eta1_i, eta2_i));
    return rcpp_result_gen;
END_RCPP
}
// update_mu_i
arma::rowvec update_mu_i(const arma::mat& sigma_i, const arma::rowvec& eta1_i, const arma::rowvec& eta2_i, const arma::mat& A, const arma::mat& B, const arma::Col<int>& R, const arma::Row<int>& y_i);
RcppExport SEXP _VEMIRT_update_mu_i(SEXP sigma_iSEXP, SEXP eta1_iSEXP, SEXP eta2_iSEXP, SEXP ASEXP, SEXP BSEXP, SEXP RSEXP, SEXP y_iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_i(sigma_iSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eta1_i(eta1_iSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type eta2_i(eta2_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::Row<int>& >::type y_i(y_iSEXP);
    rcpp_result_gen = Rcpp::wrap(update_mu_i(sigma_i, eta1_i, eta2_i, A, B, R, y_i));
    return rcpp_result_gen;
END_RCPP
}
// ve_step
void ve_step(arma::cube& sigma_, arma::mat& mu_, arma::cube& sig_mu_sum, const arma::Mat<int>& y, const arma::mat& old_A, const arma::mat& old_B, const arma::Col<int>& R, const arma::mat& old_sig, const arma::mat& old_eta1, const arma::mat& old_eta2);
RcppExport SEXP _VEMIRT_ve_step(SEXP sigma_SEXP, SEXP mu_SEXP, SEXP sig_mu_sumSEXP, SEXP ySEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP RSEXP, SEXP old_sigSEXP, SEXP old_eta1SEXP, SEXP old_eta2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::cube& >::type sigma_(sigma_SEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< arma::cube& >::type sig_mu_sum(sig_mu_sumSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type old_sig(old_sigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type old_eta1(old_eta1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type old_eta2(old_eta2SEXP);
    ve_step(sigma_, mu_, sig_mu_sum, y, old_A, old_B, R, old_sig, old_eta1, old_eta2);
    return R_NilValue;
END_RCPP
}
// calcu_sigma_cmle_cpp
arma::mat calcu_sigma_cmle_cpp(arma::mat sigma_hat, arma::mat sigma0, double tol);
RcppExport SEXP _VEMIRT_calcu_sigma_cmle_cpp(SEXP sigma_hatSEXP, SEXP sigma0SEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type sigma_hat(sigma_hatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma0(sigma0SEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(calcu_sigma_cmle_cpp(sigma_hat, sigma0, tol));
    return rcpp_result_gen;
END_RCPP
}
// update_ksi_ij
double update_ksi_ij(const arma::rowvec& Aj, const arma::rowvec& Bj, const arma::rowvec& mu_i, const arma::mat& sigma_mu_i, const int yij, const int Rj, const int ind, const bool sq_rt);
RcppExport SEXP _VEMIRT_update_ksi_ij(SEXP AjSEXP, SEXP BjSEXP, SEXP mu_iSEXP, SEXP sigma_mu_iSEXP, SEXP yijSEXP, SEXP RjSEXP, SEXP indSEXP, SEXP sq_rtSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Aj(AjSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Bj(BjSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mu_i(mu_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_mu_i(sigma_mu_iSEXP);
    Rcpp::traits::input_parameter< const int >::type yij(yijSEXP);
    Rcpp::traits::input_parameter< const int >::type Rj(RjSEXP);
    Rcpp::traits::input_parameter< const int >::type ind(indSEXP);
    Rcpp::traits::input_parameter< const bool >::type sq_rt(sq_rtSEXP);
    rcpp_result_gen = Rcpp::wrap(update_ksi_ij(Aj, Bj, mu_i, sigma_mu_i, yij, Rj, ind, sq_rt));
    return rcpp_result_gen;
END_RCPP
}
// update_Aj_
arma::rowvec update_Aj_(const arma::Row<int>& Mj, const arma::rowvec& Bj, const int Rj, const arma::Col<int>& yj, const arma::cube& sig_mu_sum, const arma::mat& mu_, const arma::vec& eta1_j, const arma::vec& eta2_j);
RcppExport SEXP _VEMIRT_update_Aj_(SEXP MjSEXP, SEXP BjSEXP, SEXP RjSEXP, SEXP yjSEXP, SEXP sig_mu_sumSEXP, SEXP mu_SEXP, SEXP eta1_jSEXP, SEXP eta2_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Row<int>& >::type Mj(MjSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Bj(BjSEXP);
    Rcpp::traits::input_parameter< const int >::type Rj(RjSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type yj(yjSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sig_mu_sum(sig_mu_sumSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_j(eta1_jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_j(eta2_jSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Aj_(Mj, Bj, Rj, yj, sig_mu_sum, mu_, eta1_j, eta2_j));
    return rcpp_result_gen;
END_RCPP
}
// update_Bj_
arma::rowvec update_Bj_(const arma::rowvec& Aj, const arma::rowvec& Bj, const int Rj, const arma::mat& mu_, const arma::vec& eta1_j, const arma::vec& eta2_j, const arma::Col<int>& yj);
RcppExport SEXP _VEMIRT_update_Bj_(SEXP AjSEXP, SEXP BjSEXP, SEXP RjSEXP, SEXP mu_SEXP, SEXP eta1_jSEXP, SEXP eta2_jSEXP, SEXP yjSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Aj(AjSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Bj(BjSEXP);
    Rcpp::traits::input_parameter< const int >::type Rj(RjSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_j(eta1_jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_j(eta2_jSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type yj(yjSEXP);
    rcpp_result_gen = Rcpp::wrap(update_Bj_(Aj, Bj, Rj, mu_, eta1_j, eta2_j, yj));
    return rcpp_result_gen;
END_RCPP
}
// calcu_n2vlb_j
double calcu_n2vlb_j(const arma::rowvec& Aj, const arma::rowvec& Bj, const arma::mat& mu_, const arma::cube& sig_mu_sum, const arma::Col<int>& yj, const int Rj, const arma::vec& ksi1_j, const arma::vec& ksi2_j, const arma::vec& eta1_j, const arma::vec& eta2_j);
RcppExport SEXP _VEMIRT_calcu_n2vlb_j(SEXP AjSEXP, SEXP BjSEXP, SEXP mu_SEXP, SEXP sig_mu_sumSEXP, SEXP yjSEXP, SEXP RjSEXP, SEXP ksi1_jSEXP, SEXP ksi2_jSEXP, SEXP eta1_jSEXP, SEXP eta2_jSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Aj(AjSEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type Bj(BjSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_(mu_SEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sig_mu_sum(sig_mu_sumSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type yj(yjSEXP);
    Rcpp::traits::input_parameter< const int >::type Rj(RjSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi1_j(ksi1_jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type ksi2_j(ksi2_jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta1_j(eta1_jSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type eta2_j(eta2_jSEXP);
    rcpp_result_gen = Rcpp::wrap(calcu_n2vlb_j(Aj, Bj, mu_, sig_mu_sum, yj, Rj, ksi1_j, ksi2_j, eta1_j, eta2_j));
    return rcpp_result_gen;
END_RCPP
}
// calcu_n2vlb_0
double calcu_n2vlb_0(const arma::mat& sig, const arma::mat& hat_sig, const int N);
RcppExport SEXP _VEMIRT_calcu_n2vlb_0(SEXP sigSEXP, SEXP hat_sigSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type hat_sig(hat_sigSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(calcu_n2vlb_0(sig, hat_sig, N));
    return rcpp_result_gen;
END_RCPP
}
// calcu_entro_
double calcu_entro_(const arma::cube& sigma_, const int N, const int K);
RcppExport SEXP _VEMIRT_calcu_entro_(SEXP sigma_SEXP, SEXP NSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube& >::type sigma_(sigma_SEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(calcu_entro_(sigma_, N, K));
    return rcpp_result_gen;
END_RCPP
}
// vem_grm
Rcpp::List vem_grm(const arma::Mat<int>& y, const arma::Col<int>& R, arma::mat old_A, arma::mat old_B, arma::mat old_sig, arma::mat old_ksi1, arma::mat old_ksi2, const arma::Mat<int> Mod, const int max_iter, const double tol_para, const int stop_cri, const int EFA, const int verbose);
RcppExport SEXP _VEMIRT_vem_grm(SEXP ySEXP, SEXP RSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigSEXP, SEXP old_ksi1SEXP, SEXP old_ksi2SEXP, SEXP ModSEXP, SEXP max_iterSEXP, SEXP tol_paraSEXP, SEXP stop_criSEXP, SEXP EFASEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_sig(old_sigSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_ksi1(old_ksi1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_ksi2(old_ksi2SEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int> >::type Mod(ModSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_para(tol_paraSEXP);
    Rcpp::traits::input_parameter< const int >::type stop_cri(stop_criSEXP);
    Rcpp::traits::input_parameter< const int >::type EFA(EFASEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(vem_grm(y, R, old_A, old_B, old_sig, old_ksi1, old_ksi2, Mod, max_iter, tol_para, stop_cri, EFA, verbose));
    return rcpp_result_gen;
END_RCPP
}
// b2gamma
arma::mat b2gamma(const arma::mat& B, const arma::Col<int>& R);
RcppExport SEXP _VEMIRT_b2gamma(SEXP BSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(b2gamma(B, R));
    return rcpp_result_gen;
END_RCPP
}
// gamma2b
arma::mat gamma2b(const arma::mat& gamma, const arma::Col<int>& R);
RcppExport SEXP _VEMIRT_gamma2b(SEXP gammaSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(gamma2b(gamma, R));
    return rcpp_result_gen;
END_RCPP
}
// calcu_Fjr
void calcu_Fjr(arma::mat& Fjr, const arma::mat& Theta_is, const arma::mat& A, const arma::mat& B, const arma::Row<int>& y_i);
RcppExport SEXP _VEMIRT_calcu_Fjr(SEXP FjrSEXP, SEXP Theta_isSEXP, SEXP ASEXP, SEXP BSEXP, SEXP y_iSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Fjr(FjrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_is(Theta_isSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::Row<int>& >::type y_i(y_iSEXP);
    calcu_Fjr(Fjr, Theta_is, A, B, y_i);
    return R_NilValue;
END_RCPP
}
// calcu_Fjrp
void calcu_Fjrp(arma::mat& Fjrp, const arma::mat& Theta_is, const arma::mat& A, const arma::mat& B, const arma::Row<int>& y_i, const arma::Col<int>& R);
RcppExport SEXP _VEMIRT_calcu_Fjrp(SEXP FjrpSEXP, SEXP Theta_isSEXP, SEXP ASEXP, SEXP BSEXP, SEXP y_iSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type Fjrp(FjrpSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_is(Theta_isSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type A(ASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type B(BSEXP);
    Rcpp::traits::input_parameter< const arma::Row<int>& >::type y_i(y_iSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    calcu_Fjrp(Fjrp, Theta_is, A, B, y_i, R);
    return R_NilValue;
END_RCPP
}
// calcu_tid_wis
void calcu_tid_wis(arma::vec& tid_wis, const arma::mat& Theta_is, const arma::mat& Theta_is__, const arma::rowvec& mu_i, const arma::mat& sigma_i, const arma::mat& sig, const arma::mat& Fjr, const arma::mat& Fjrp);
RcppExport SEXP _VEMIRT_calcu_tid_wis(SEXP tid_wisSEXP, SEXP Theta_isSEXP, SEXP Theta_is__SEXP, SEXP mu_iSEXP, SEXP sigma_iSEXP, SEXP sigSEXP, SEXP FjrSEXP, SEXP FjrpSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type tid_wis(tid_wisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_is(Theta_isSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_is__(Theta_is__SEXP);
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mu_i(mu_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma_i(sigma_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fjr(FjrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fjrp(FjrpSEXP);
    calcu_tid_wis(tid_wis, Theta_is, Theta_is__, mu_i, sigma_i, sig, Fjr, Fjrp);
    return R_NilValue;
END_RCPP
}
// calcu_grad_sig
arma::mat calcu_grad_sig(const arma::mat& old_sig, const arma::mat& Theta_is, const arma::vec& tid_wis);
RcppExport SEXP _VEMIRT_calcu_grad_sig(SEXP old_sigSEXP, SEXP Theta_isSEXP, SEXP tid_wisSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type old_sig(old_sigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_is(Theta_isSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tid_wis(tid_wisSEXP);
    rcpp_result_gen = Rcpp::wrap(calcu_grad_sig(old_sig, Theta_is, tid_wis));
    return rcpp_result_gen;
END_RCPP
}
// calcu_grad_A
arma::mat calcu_grad_A(const arma::Mat<int>& M, const arma::mat& Theta_is, const arma::vec& tid_wis, const arma::mat& Fjr, const arma::mat& Fjrp);
RcppExport SEXP _VEMIRT_calcu_grad_A(SEXP MSEXP, SEXP Theta_isSEXP, SEXP tid_wisSEXP, SEXP FjrSEXP, SEXP FjrpSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_is(Theta_isSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tid_wis(tid_wisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fjr(FjrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fjrp(FjrpSEXP);
    rcpp_result_gen = Rcpp::wrap(calcu_grad_A(M, Theta_is, tid_wis, Fjr, Fjrp));
    return rcpp_result_gen;
END_RCPP
}
// calcu_grad_gam
arma::mat calcu_grad_gam(const arma::mat& old_gam, const arma::mat& Theta_is, const arma::vec& tid_wis, const arma::mat& Fjr, const arma::mat& Fjrp, const arma::Row<int>& y_i, const arma::Col<int>& R);
RcppExport SEXP _VEMIRT_calcu_grad_gam(SEXP old_gamSEXP, SEXP Theta_isSEXP, SEXP tid_wisSEXP, SEXP FjrSEXP, SEXP FjrpSEXP, SEXP y_iSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type old_gam(old_gamSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Theta_is(Theta_isSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type tid_wis(tid_wisSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fjr(FjrSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Fjrp(FjrpSEXP);
    Rcpp::traits::input_parameter< const arma::Row<int>& >::type y_i(y_iSEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(calcu_grad_gam(old_gam, Theta_is, tid_wis, Fjr, Fjrp, y_i, R));
    return rcpp_result_gen;
END_RCPP
}
// update_param
arma::mat update_param(const arma::mat& old_param, const arma::mat& grad_param, arma::mat& vu_param, arma::mat& r_param, const double beta1, const double beta2, const double beta1t, const double beta2t, const double eps, const double eta);
RcppExport SEXP _VEMIRT_update_param(SEXP old_paramSEXP, SEXP grad_paramSEXP, SEXP vu_paramSEXP, SEXP r_paramSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP beta1tSEXP, SEXP beta2tSEXP, SEXP epsSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type old_param(old_paramSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type grad_param(grad_paramSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type vu_param(vu_paramSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type r_param(r_paramSEXP);
    Rcpp::traits::input_parameter< const double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const double >::type beta1t(beta1tSEXP);
    Rcpp::traits::input_parameter< const double >::type beta2t(beta2tSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const double >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_param(old_param, grad_param, vu_param, r_param, beta1, beta2, beta1t, beta2t, eps, eta));
    return rcpp_result_gen;
END_RCPP
}
// gen_theta_is
arma::mat gen_theta_is(const arma::rowvec& mu, const arma::mat& sigma, int M);
RcppExport SEXP _VEMIRT_gen_theta_is(SEXP muSEXP, SEXP sigmaSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::rowvec& >::type mu(muSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(gen_theta_is(mu, sigma, M));
    return rcpp_result_gen;
END_RCPP
}
// iwgvem_grm
Rcpp::List iwgvem_grm(const arma::Mat<int>& y, const arma::Col<int>& R, arma::mat old_A, arma::mat old_B, arma::mat old_sig, const arma::mat& mu_n, const arma::cube& sigma_n, const arma::Mat<int>& Mod, const int S, const int M, const double beta1, const double beta2, const double eta_A, const double eta_gam, const double eta_sig, const double eps, const int max_iter, const double tol_para, const int verbose);
RcppExport SEXP _VEMIRT_iwgvem_grm(SEXP ySEXP, SEXP RSEXP, SEXP old_ASEXP, SEXP old_BSEXP, SEXP old_sigSEXP, SEXP mu_nSEXP, SEXP sigma_nSEXP, SEXP ModSEXP, SEXP SSEXP, SEXP MSEXP, SEXP beta1SEXP, SEXP beta2SEXP, SEXP eta_ASEXP, SEXP eta_gamSEXP, SEXP eta_sigSEXP, SEXP epsSEXP, SEXP max_iterSEXP, SEXP tol_paraSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::Col<int>& >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_A(old_ASEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_B(old_BSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type old_sig(old_sigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_n(mu_nSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sigma_n(sigma_nSEXP);
    Rcpp::traits::input_parameter< const arma::Mat<int>& >::type Mod(ModSEXP);
    Rcpp::traits::input_parameter< const int >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< const double >::type beta2(beta2SEXP);
    Rcpp::traits::input_parameter< const double >::type eta_A(eta_ASEXP);
    Rcpp::traits::input_parameter< const double >::type eta_gam(eta_gamSEXP);
    Rcpp::traits::input_parameter< const double >::type eta_sig(eta_sigSEXP);
    Rcpp::traits::input_parameter< const double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< const int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< const double >::type tol_para(tol_paraSEXP);
    Rcpp::traits::input_parameter< const int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(iwgvem_grm(y, R, old_A, old_B, old_sig, mu_n, sigma_n, Mod, S, M, beta1, beta2, eta_A, eta_gam, eta_sig, eps, max_iter, tol_para, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ecfa2
List ecfa2(const arma::mat& u, const arma::mat& Sigma, const int& domain, const int& person, const int& item, const arma::mat& eta, const arma::mat& new_a, const arma::vec& new_b);
RcppExport SEXP _VEMIRT_ecfa2(SEXP uSEXP, SEXP SigmaSEXP, SEXP domainSEXP, SEXP personSEXP, SEXP itemSEXP, SEXP etaSEXP, SEXP new_aSEXP, SEXP new_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    rcpp_result_gen = Rcpp::wrap(ecfa2(u, Sigma, domain, person, item, eta, new_a, new_b));
    return rcpp_result_gen;
END_RCPP
}
// acfa2
arma::mat acfa2(const arma::mat& u, const arma::mat& indic, const int& person, const int& item, const int& domain, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& new_a1);
RcppExport SEXP _VEMIRT_acfa2(SEXP uSEXP, SEXP indicSEXP, SEXP personSEXP, SEXP itemSEXP, SEXP domainSEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP new_a1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indic(indicSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a1(new_a1SEXP);
    rcpp_result_gen = Rcpp::wrap(acfa2(u, indic, person, item, domain, eta, new_b, SIGMA, MU, new_a1));
    return rcpp_result_gen;
END_RCPP
}
// lb2pl
double lb2pl(const arma::mat& u, const arma::mat& xi, const arma::mat& sig, const arma::mat& new_a, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU);
RcppExport SEXP _VEMIRT_lb2pl(SEXP uSEXP, SEXP xiSEXP, SEXP sigSEXP, SEXP new_aSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    rcpp_result_gen = Rcpp::wrap(lb2pl(u, xi, sig, new_a, new_b, SIGMA, MU));
    return rcpp_result_gen;
END_RCPP
}
// ea2
arma::cube ea2(const int& domain, const int& person, const int& item, const arma::mat& eta, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& indic);
RcppExport SEXP _VEMIRT_ea2(SEXP domainSEXP, SEXP personSEXP, SEXP itemSEXP, SEXP etaSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP indicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indic(indicSEXP);
    rcpp_result_gen = Rcpp::wrap(ea2(domain, person, item, eta, SIGMA, MU, indic));
    return rcpp_result_gen;
END_RCPP
}
// ecfa3pl
List ecfa3pl(const arma::mat& u, const arma::mat& Sigma, const int& domain, const arma::vec& id_1, const int& item, const arma::mat& eta, const arma::mat& new_s, const arma::mat& new_a, const arma::vec& new_b, const arma::cube& SIGMA1, const arma::mat& MU1, const arma::mat& xi1);
RcppExport SEXP _VEMIRT_ecfa3pl(SEXP uSEXP, SEXP SigmaSEXP, SEXP domainSEXP, SEXP id_1SEXP, SEXP itemSEXP, SEXP etaSEXP, SEXP new_sSEXP, SEXP new_aSEXP, SEXP new_bSEXP, SEXP SIGMA1SEXP, SEXP MU1SEXP, SEXP xi1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma(SigmaSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_s(new_sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA1(SIGMA1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU1(MU1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xi1(xi1SEXP);
    rcpp_result_gen = Rcpp::wrap(ecfa3pl(u, Sigma, domain, id_1, item, eta, new_s, new_a, new_b, SIGMA1, MU1, xi1));
    return rcpp_result_gen;
END_RCPP
}
// s3pl
arma::mat s3pl(const int& item, const arma::vec& id_1, const arma::mat& s, const arma::mat& eta, const arma::mat& new_a, const arma::vec& s_num, const arma::vec& new_b, const arma::mat& u, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& xi);
RcppExport SEXP _VEMIRT_s3pl(SEXP itemSEXP, SEXP id_1SEXP, SEXP sSEXP, SEXP etaSEXP, SEXP new_aSEXP, SEXP s_numSEXP, SEXP new_bSEXP, SEXP uSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type s_num(s_numSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(s3pl(item, id_1, s, eta, new_a, s_num, new_b, u, SIGMA, MU, xi));
    return rcpp_result_gen;
END_RCPP
}
// eta3pl
arma::mat eta3pl(const int& item, const arma::vec& id_1, const arma::mat& ea, const arma::mat& xi);
RcppExport SEXP _VEMIRT_eta3pl(SEXP itemSEXP, SEXP id_1SEXP, SEXP eaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type ea(eaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(eta3pl(item, id_1, ea, xi));
    return rcpp_result_gen;
END_RCPP
}
// b3pl
List b3pl(const int& item, const arma::vec& id_1, const arma::mat& new_s, const arma::mat& eta, const arma::mat& u, const arma::mat& new_a, const double& dec_st, const arma::mat& MU, const arma::vec& prev_b_num, const arma::vec& prev_b_denom, const double& mu_b, const double& sigma2_b);
RcppExport SEXP _VEMIRT_b3pl(SEXP itemSEXP, SEXP id_1SEXP, SEXP new_sSEXP, SEXP etaSEXP, SEXP uSEXP, SEXP new_aSEXP, SEXP dec_stSEXP, SEXP MUSEXP, SEXP prev_b_numSEXP, SEXP prev_b_denomSEXP, SEXP mu_bSEXP, SEXP sigma2_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_s(new_sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prev_b_num(prev_b_numSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type prev_b_denom(prev_b_denomSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_b(mu_bSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma2_b(sigma2_bSEXP);
    rcpp_result_gen = Rcpp::wrap(b3pl(item, id_1, new_s, eta, u, new_a, dec_st, MU, prev_b_num, prev_b_denom, mu_b, sigma2_b));
    return rcpp_result_gen;
END_RCPP
}
// acfa3
List acfa3(const arma::mat& u, const arma::mat& indic, const arma::vec& id_1, const int& item, const int& domain, const arma::mat& eta, const arma::mat& a, const arma::vec& new_b, const arma::mat& new_s, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& prev_a_num, const arma::cube& prev_a_denom, const double& dec_st);
RcppExport SEXP _VEMIRT_acfa3(SEXP uSEXP, SEXP indicSEXP, SEXP id_1SEXP, SEXP itemSEXP, SEXP domainSEXP, SEXP etaSEXP, SEXP aSEXP, SEXP new_bSEXP, SEXP new_sSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP prev_a_numSEXP, SEXP prev_a_denomSEXP, SEXP dec_stSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indic(indicSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_s(new_sSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_a_num(prev_a_numSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type prev_a_denom(prev_a_denomSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    rcpp_result_gen = Rcpp::wrap(acfa3(u, indic, id_1, item, domain, eta, a, new_b, new_s, SIGMA, MU, prev_a_num, prev_a_denom, dec_st));
    return rcpp_result_gen;
END_RCPP
}
// lb3pl
double lb3pl(const arma::mat& u, const arma::mat& xi, const arma::mat& s, const arma::vec& id_1, const arma::mat& new_a, const arma::vec& new_c, const arma::mat& sig, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const double& Alpha, const double& Beta, const double& mu_b, const double& sigma2_b);
RcppExport SEXP _VEMIRT_lb3pl(SEXP uSEXP, SEXP xiSEXP, SEXP sSEXP, SEXP id_1SEXP, SEXP new_aSEXP, SEXP new_cSEXP, SEXP sigSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP AlphaSEXP, SEXP BetaSEXP, SEXP mu_bSEXP, SEXP sigma2_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_c(new_cSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sig(sigSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double& >::type Alpha(AlphaSEXP);
    Rcpp::traits::input_parameter< const double& >::type Beta(BetaSEXP);
    Rcpp::traits::input_parameter< const double& >::type mu_b(mu_bSEXP);
    Rcpp::traits::input_parameter< const double& >::type sigma2_b(sigma2_bSEXP);
    rcpp_result_gen = Rcpp::wrap(lb3pl(u, xi, s, id_1, new_a, new_c, sig, new_b, SIGMA, MU, Alpha, Beta, mu_b, sigma2_b));
    return rcpp_result_gen;
END_RCPP
}
// eefa2
List eefa2(const arma::mat& u, const int& domain, const int& person, const int& item, const arma::mat& eta, const arma::mat& new_a, const arma::vec& new_b);
RcppExport SEXP _VEMIRT_eefa2(SEXP uSEXP, SEXP domainSEXP, SEXP personSEXP, SEXP itemSEXP, SEXP etaSEXP, SEXP new_aSEXP, SEXP new_bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    rcpp_result_gen = Rcpp::wrap(eefa2(u, domain, person, item, eta, new_a, new_b));
    return rcpp_result_gen;
END_RCPP
}
// aefa2
arma::mat aefa2(const arma::mat& u, const int& domain, const int& person, const int& item, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU);
RcppExport SEXP _VEMIRT_aefa2(SEXP uSEXP, SEXP domainSEXP, SEXP personSEXP, SEXP itemSEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    rcpp_result_gen = Rcpp::wrap(aefa2(u, domain, person, item, eta, new_b, SIGMA, MU));
    return rcpp_result_gen;
END_RCPP
}
// paal2pl
arma::mat paal2pl(const arma::mat& u, const int& domain, const int& person, const double& lbd, const arma::vec& sdf, const arma::mat& eta, const arma::mat& a, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& weights);
RcppExport SEXP _VEMIRT_paal2pl(SEXP uSEXP, SEXP domainSEXP, SEXP personSEXP, SEXP lbdSEXP, SEXP sdfSEXP, SEXP etaSEXP, SEXP aSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdf(sdfSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(paal2pl(u, domain, person, lbd, sdf, eta, a, new_b, SIGMA, MU, weights));
    return rcpp_result_gen;
END_RCPP
}
// paalc22pl
arma::mat paalc22pl(const arma::mat& u, const arma::mat& a, const arma::mat& indic, const arma::vec& nopenalty_col, const arma::vec& lastone, const double& lbd, const int& person, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& weights);
RcppExport SEXP _VEMIRT_paalc22pl(SEXP uSEXP, SEXP aSEXP, SEXP indicSEXP, SEXP nopenalty_colSEXP, SEXP lastoneSEXP, SEXP lbdSEXP, SEXP personSEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indic(indicSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lastone(lastoneSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(paalc22pl(u, a, indic, nopenalty_col, lastone, lbd, person, eta, new_b, SIGMA, MU, weights));
    return rcpp_result_gen;
END_RCPP
}
// paalc22pl1
arma::mat paalc22pl1(const arma::mat& u, const int& domain, const int& item, const int& person, const double& lbd, const arma::mat& eta, arma::mat& new_a, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const arma::vec& pc, const arma::mat& weights);
RcppExport SEXP _VEMIRT_paalc22pl1(SEXP uSEXP, SEXP domainSEXP, SEXP itemSEXP, SEXP personSEXP, SEXP lbdSEXP, SEXP etaSEXP, SEXP new_aSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP pcSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(paalc22pl1(u, domain, item, person, lbd, eta, new_a, new_b, SIGMA, MU, pc, weights));
    return rcpp_result_gen;
END_RCPP
}
// nalc12pl
arma::mat nalc12pl(const arma::mat& u, const arma::mat& indic, const arma::vec& nopenalty_col, const int& person, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU);
RcppExport SEXP _VEMIRT_nalc12pl(SEXP uSEXP, SEXP indicSEXP, SEXP nopenalty_colSEXP, SEXP personSEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indic(indicSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    rcpp_result_gen = Rcpp::wrap(nalc12pl(u, indic, nopenalty_col, person, eta, new_b, SIGMA, MU));
    return rcpp_result_gen;
END_RCPP
}
// palc12pl
arma::mat palc12pl(const arma::mat& u, const int& domain, const int& person, const double& lbd, const arma::vec& sdf, const arma::mat& eta, const arma::mat& a, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU);
RcppExport SEXP _VEMIRT_palc12pl(SEXP uSEXP, SEXP domainSEXP, SEXP personSEXP, SEXP lbdSEXP, SEXP sdfSEXP, SEXP etaSEXP, SEXP aSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdf(sdfSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    rcpp_result_gen = Rcpp::wrap(palc12pl(u, domain, person, lbd, sdf, eta, a, new_b, SIGMA, MU));
    return rcpp_result_gen;
END_RCPP
}
// nalc22pl
arma::mat nalc22pl(const arma::mat& u, const int& domain, const arma::mat& a, const arma::vec& nopenalty_col, const arma::vec& lastone, const int& person, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU);
RcppExport SEXP _VEMIRT_nalc22pl(SEXP uSEXP, SEXP domainSEXP, SEXP aSEXP, SEXP nopenalty_colSEXP, SEXP lastoneSEXP, SEXP personSEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lastone(lastoneSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    rcpp_result_gen = Rcpp::wrap(nalc22pl(u, domain, a, nopenalty_col, lastone, person, eta, new_b, SIGMA, MU));
    return rcpp_result_gen;
END_RCPP
}
// palc22pl
arma::mat palc22pl(const arma::mat& u, const arma::mat& a, const arma::vec& nopenalty_col, const arma::vec& lastone, const double& lbd, const int& person, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU);
RcppExport SEXP _VEMIRT_palc22pl(SEXP uSEXP, SEXP aSEXP, SEXP nopenalty_colSEXP, SEXP lastoneSEXP, SEXP lbdSEXP, SEXP personSEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lastone(lastoneSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    rcpp_result_gen = Rcpp::wrap(palc22pl(u, a, nopenalty_col, lastone, lbd, person, eta, new_b, SIGMA, MU));
    return rcpp_result_gen;
END_RCPP
}
// palc22pl1
arma::mat palc22pl1(const arma::mat& u, const int& domain, const int& item, const int& person, const double& lbd, const arma::mat& eta, arma::mat& new_a, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const arma::vec& pc);
RcppExport SEXP _VEMIRT_palc22pl1(SEXP uSEXP, SEXP domainSEXP, SEXP itemSEXP, SEXP personSEXP, SEXP lbdSEXP, SEXP etaSEXP, SEXP new_aSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP pcSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pc(pcSEXP);
    rcpp_result_gen = Rcpp::wrap(palc22pl1(u, domain, item, person, lbd, eta, new_a, new_b, SIGMA, MU, pc));
    return rcpp_result_gen;
END_RCPP
}
// eefa3
List eefa3(const arma::mat& u, const int& domain, const arma::vec& id_1, const int& item, const arma::mat& eta, const arma::mat& new_s, const arma::mat& new_a, const arma::vec& new_b, const arma::cube& SIGMA1, const arma::mat& MU1, const arma::mat& xi1);
RcppExport SEXP _VEMIRT_eefa3(SEXP uSEXP, SEXP domainSEXP, SEXP id_1SEXP, SEXP itemSEXP, SEXP etaSEXP, SEXP new_sSEXP, SEXP new_aSEXP, SEXP new_bSEXP, SEXP SIGMA1SEXP, SEXP MU1SEXP, SEXP xi1SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_s(new_sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_a(new_aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA1(SIGMA1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU1(MU1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type xi1(xi1SEXP);
    rcpp_result_gen = Rcpp::wrap(eefa3(u, domain, id_1, item, eta, new_s, new_a, new_b, SIGMA1, MU1, xi1));
    return rcpp_result_gen;
END_RCPP
}
// aefa3
List aefa3(const arma::mat& u, const arma::vec& id_1, const int& item, const int& domain, const arma::mat& eta, const arma::mat& a, const arma::vec& new_b, const arma::mat& new_s, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& prev_a_num, const arma::cube& prev_a_denom, const double& dec_st);
RcppExport SEXP _VEMIRT_aefa3(SEXP uSEXP, SEXP id_1SEXP, SEXP itemSEXP, SEXP domainSEXP, SEXP etaSEXP, SEXP aSEXP, SEXP new_bSEXP, SEXP new_sSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP prev_a_numSEXP, SEXP prev_a_denomSEXP, SEXP dec_stSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type new_s(new_sSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_a_num(prev_a_numSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type prev_a_denom(prev_a_denomSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    rcpp_result_gen = Rcpp::wrap(aefa3(u, id_1, item, domain, eta, a, new_b, new_s, SIGMA, MU, prev_a_num, prev_a_denom, dec_st));
    return rcpp_result_gen;
END_RCPP
}
// paal3pl
List paal3pl(const arma::mat& u, const int& domain, const int& item, const arma::vec& id_1, const double& lbd, const arma::mat& eta, const arma::mat& s, const arma::mat& a, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const double& dec_st, const arma::mat& prev_delta, const arma::mat& prev_deriv2, const arma::mat& weights, const arma::vec& sdf);
RcppExport SEXP _VEMIRT_paal3pl(SEXP uSEXP, SEXP domainSEXP, SEXP itemSEXP, SEXP id_1SEXP, SEXP lbdSEXP, SEXP etaSEXP, SEXP sSEXP, SEXP aSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP dec_stSEXP, SEXP prev_deltaSEXP, SEXP prev_deriv2SEXP, SEXP weightsSEXP, SEXP sdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_delta(prev_deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_deriv2(prev_deriv2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdf(sdfSEXP);
    rcpp_result_gen = Rcpp::wrap(paal3pl(u, domain, item, id_1, lbd, eta, s, a, new_b, SIGMA, MU, dec_st, prev_delta, prev_deriv2, weights, sdf));
    return rcpp_result_gen;
END_RCPP
}
// paalc23pl
List paalc23pl(const arma::mat& u, const arma::mat& a, const arma::vec& nopenalty_col, const arma::mat& s, const arma::vec& lastone, const double& lbd, const arma::vec& id_1, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const double& dec_st, const arma::mat& prev_delta, const arma::mat& prev_deriv2, const arma::mat& weights);
RcppExport SEXP _VEMIRT_paalc23pl(SEXP uSEXP, SEXP aSEXP, SEXP nopenalty_colSEXP, SEXP sSEXP, SEXP lastoneSEXP, SEXP lbdSEXP, SEXP id_1SEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP dec_stSEXP, SEXP prev_deltaSEXP, SEXP prev_deriv2SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lastone(lastoneSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_delta(prev_deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_deriv2(prev_deriv2SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(paalc23pl(u, a, nopenalty_col, s, lastone, lbd, id_1, eta, new_b, SIGMA, MU, dec_st, prev_delta, prev_deriv2, weights));
    return rcpp_result_gen;
END_RCPP
}
// paalc23pl1
List paalc23pl1(const arma::mat& u, const arma::mat& a, const arma::mat& s, const double& lbd, const arma::vec& id_1, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const double& dec_st, const arma::mat& prev_delta, const arma::mat& prev_deriv2, const arma::vec& pc, const arma::mat& delta1, const arma::mat& deriv22, const arma::mat& weights);
RcppExport SEXP _VEMIRT_paalc23pl1(SEXP uSEXP, SEXP aSEXP, SEXP sSEXP, SEXP lbdSEXP, SEXP id_1SEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP dec_stSEXP, SEXP prev_deltaSEXP, SEXP prev_deriv2SEXP, SEXP pcSEXP, SEXP delta1SEXP, SEXP deriv22SEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_delta(prev_deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_deriv2(prev_deriv2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type deriv22(deriv22SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(paalc23pl1(u, a, s, lbd, id_1, eta, new_b, SIGMA, MU, dec_st, prev_delta, prev_deriv2, pc, delta1, deriv22, weights));
    return rcpp_result_gen;
END_RCPP
}
// nalc13pl
List nalc13pl(const arma::mat& u, const arma::mat& indic, const arma::vec& nopenalty_col, const arma::mat& eta, const arma::mat& s, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const arma::mat& a, const arma::vec& id_1, const arma::mat& prev_a_num, const arma::cube& prev_a_denom, const double& dec_st);
RcppExport SEXP _VEMIRT_nalc13pl(SEXP uSEXP, SEXP indicSEXP, SEXP nopenalty_colSEXP, SEXP etaSEXP, SEXP sSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP aSEXP, SEXP id_1SEXP, SEXP prev_a_numSEXP, SEXP prev_a_denomSEXP, SEXP dec_stSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type indic(indicSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_a_num(prev_a_numSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type prev_a_denom(prev_a_denomSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    rcpp_result_gen = Rcpp::wrap(nalc13pl(u, indic, nopenalty_col, eta, s, new_b, SIGMA, MU, a, id_1, prev_a_num, prev_a_denom, dec_st));
    return rcpp_result_gen;
END_RCPP
}
// palc13pl
List palc13pl(const arma::mat& u, const int& domain, const int& item, const arma::vec& id_1, const double& lbd, const arma::mat& eta, const arma::mat& s, const arma::mat& a, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const double& dec_st, const arma::mat& prev_delta, const arma::mat& prev_deriv2, const arma::vec& sdf);
RcppExport SEXP _VEMIRT_palc13pl(SEXP uSEXP, SEXP domainSEXP, SEXP itemSEXP, SEXP id_1SEXP, SEXP lbdSEXP, SEXP etaSEXP, SEXP sSEXP, SEXP aSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP dec_stSEXP, SEXP prev_deltaSEXP, SEXP prev_deriv2SEXP, SEXP sdfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_delta(prev_deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_deriv2(prev_deriv2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sdf(sdfSEXP);
    rcpp_result_gen = Rcpp::wrap(palc13pl(u, domain, item, id_1, lbd, eta, s, a, new_b, SIGMA, MU, dec_st, prev_delta, prev_deriv2, sdf));
    return rcpp_result_gen;
END_RCPP
}
// nalc23pl
List nalc23pl(const arma::mat& u, const int& domain, const int& item, const arma::mat& a, const arma::vec& nopenalty_col, const arma::vec& lastone, const arma::mat& s, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const arma::vec& id_1, const arma::mat& prev_a_num, const arma::cube& prev_a_denom, const double& dec_st);
RcppExport SEXP _VEMIRT_nalc23pl(SEXP uSEXP, SEXP domainSEXP, SEXP itemSEXP, SEXP aSEXP, SEXP nopenalty_colSEXP, SEXP lastoneSEXP, SEXP sSEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP id_1SEXP, SEXP prev_a_numSEXP, SEXP prev_a_denomSEXP, SEXP dec_stSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lastone(lastoneSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_a_num(prev_a_numSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type prev_a_denom(prev_a_denomSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    rcpp_result_gen = Rcpp::wrap(nalc23pl(u, domain, item, a, nopenalty_col, lastone, s, eta, new_b, SIGMA, MU, id_1, prev_a_num, prev_a_denom, dec_st));
    return rcpp_result_gen;
END_RCPP
}
// palc23pl
List palc23pl(const arma::mat& u, const arma::mat& a, const arma::vec& nopenalty_col, const arma::mat& s, const arma::vec& lastone, const double& lbd, const arma::vec& id_1, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const double& dec_st, const arma::mat& prev_delta, const arma::mat& prev_deriv2);
RcppExport SEXP _VEMIRT_palc23pl(SEXP uSEXP, SEXP aSEXP, SEXP nopenalty_colSEXP, SEXP sSEXP, SEXP lastoneSEXP, SEXP lbdSEXP, SEXP id_1SEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP dec_stSEXP, SEXP prev_deltaSEXP, SEXP prev_deriv2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nopenalty_col(nopenalty_colSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type lastone(lastoneSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_delta(prev_deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_deriv2(prev_deriv2SEXP);
    rcpp_result_gen = Rcpp::wrap(palc23pl(u, a, nopenalty_col, s, lastone, lbd, id_1, eta, new_b, SIGMA, MU, dec_st, prev_delta, prev_deriv2));
    return rcpp_result_gen;
END_RCPP
}
// palc23pl1
List palc23pl1(const arma::mat& u, const arma::mat& a, const arma::mat& s, const double& lbd, const arma::vec& id_1, const arma::mat& eta, const arma::vec& new_b, const arma::cube& SIGMA, const arma::mat& MU, const double& dec_st, const arma::mat& prev_delta, const arma::mat& prev_deriv2, const arma::vec& pc, const arma::mat& delta1, const arma::mat& deriv22);
RcppExport SEXP _VEMIRT_palc23pl1(SEXP uSEXP, SEXP aSEXP, SEXP sSEXP, SEXP lbdSEXP, SEXP id_1SEXP, SEXP etaSEXP, SEXP new_bSEXP, SEXP SIGMASEXP, SEXP MUSEXP, SEXP dec_stSEXP, SEXP prev_deltaSEXP, SEXP prev_deriv2SEXP, SEXP pcSEXP, SEXP delta1SEXP, SEXP deriv22SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type u(uSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const double& >::type lbd(lbdSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type id_1(id_1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type new_b(new_bSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type SIGMA(SIGMASEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type MU(MUSEXP);
    Rcpp::traits::input_parameter< const double& >::type dec_st(dec_stSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_delta(prev_deltaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type prev_deriv2(prev_deriv2SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type pc(pcSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type delta1(delta1SEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type deriv22(deriv22SEXP);
    rcpp_result_gen = Rcpp::wrap(palc23pl1(u, a, s, lbd, id_1, eta, new_b, SIGMA, MU, dec_st, prev_delta, prev_deriv2, pc, delta1, deriv22));
    return rcpp_result_gen;
END_RCPP
}
// sumoverk
arma::mat sumoverk(int G, arma::mat rgky, arma::rowvec aj, arma::rowvec dj, arma::rowvec betjy, arma::rowvec gamjy, arma::mat X);
RcppExport SEXP _VEMIRT_sumoverk(SEXP GSEXP, SEXP rgkySEXP, SEXP ajSEXP, SEXP djSEXP, SEXP betjySEXP, SEXP gamjySEXP, SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rgky(rgkySEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type aj(ajSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type dj(djSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type betjy(betjySEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type gamjy(gamjySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(sumoverk(G, rgky, aj, dj, betjy, gamjy, X));
    return rcpp_result_gen;
END_RCPP
}
// ngest
arma::rowvec ngest(arma::mat LiA, int y, arma::uvec Nvec, int G);
RcppExport SEXP _VEMIRT_ngest(SEXP LiASEXP, SEXP ySEXP, SEXP NvecSEXP, SEXP GSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type LiA(LiASEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type Nvec(NvecSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    rcpp_result_gen = Rcpp::wrap(ngest(LiA, y, Nvec, G));
    return rcpp_result_gen;
END_RCPP
}
// rgkest
arma::mat rgkest(int j, arma::cube Xijk, arma::mat LiA, int y, arma::vec Nvec, int G, int N, int m);
RcppExport SEXP _VEMIRT_rgkest(SEXP jSEXP, SEXP XijkSEXP, SEXP LiASEXP, SEXP ySEXP, SEXP NvecSEXP, SEXP GSEXP, SEXP NSEXP, SEXP mSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Xijk(XijkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type LiA(LiASEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Nvec(NvecSEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    rcpp_result_gen = Rcpp::wrap(rgkest(j, Xijk, LiA, y, Nvec, G, N, m));
    return rcpp_result_gen;
END_RCPP
}
// eigenMapMatMult
SEXP eigenMapMatMult(const Eigen::Map<Eigen::MatrixXd> A, Eigen::Map<Eigen::MatrixXd> B);
RcppExport SEXP _VEMIRT_eigenMapMatMult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(eigenMapMatMult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// dmvnrm2
double dmvnrm2(arma::rowvec x, arma::rowvec mean, arma::mat sigma, bool logd);
RcppExport SEXP _VEMIRT_dmvnrm2(SEXP xSEXP, SEXP meanSEXP, SEXP sigmaSEXP, SEXP logdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::rowvec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< bool >::type logd(logdSEXP);
    rcpp_result_gen = Rcpp::wrap(dmvnrm2(x, mean, sigma, logd));
    return rcpp_result_gen;
END_RCPP
}
// Estep1
arma::mat Estep1(arma::mat resp, arma::vec Nvec, arma::mat X, int y, int G, arma::mat yallgroup, arma::mat Mulist, arma::cube Siglist, arma::mat gra, arma::mat grd, arma::mat grbeta, arma::cube grgamma, int r, int J, int m, int N);
RcppExport SEXP _VEMIRT_Estep1(SEXP respSEXP, SEXP NvecSEXP, SEXP XSEXP, SEXP ySEXP, SEXP GSEXP, SEXP yallgroupSEXP, SEXP MulistSEXP, SEXP SiglistSEXP, SEXP graSEXP, SEXP grdSEXP, SEXP grbetaSEXP, SEXP grgammaSEXP, SEXP rSEXP, SEXP JSEXP, SEXP mSEXP, SEXP NSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type resp(respSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type Nvec(NvecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yallgroup(yallgroupSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type Mulist(MulistSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type Siglist(SiglistSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gra(graSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grd(grdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grbeta(grbetaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type grgamma(grgammaSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    rcpp_result_gen = Rcpp::wrap(Estep1(resp, Nvec, X, y, G, yallgroup, Mulist, Siglist, gra, grd, grbeta, grgamma, r, J, m, N));
    return rcpp_result_gen;
END_RCPP
}
// scocal
arma::mat scocal(int j, arma::rowvec ng, arma::mat rgk, arma::rowvec a, arma::rowvec d, arma::rowvec bet, arma::mat gam, double maxtol, arma::mat X, arma::mat yallgroup, int y, int G, int r, int m, int eta);
RcppExport SEXP _VEMIRT_scocal(SEXP jSEXP, SEXP ngSEXP, SEXP rgkSEXP, SEXP aSEXP, SEXP dSEXP, SEXP betSEXP, SEXP gamSEXP, SEXP maxtolSEXP, SEXP XSEXP, SEXP yallgroupSEXP, SEXP ySEXP, SEXP GSEXP, SEXP rSEXP, SEXP mSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rgk(rgkSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type d(dSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type bet(betSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gam(gamSEXP);
    Rcpp::traits::input_parameter< double >::type maxtol(maxtolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yallgroup(yallgroupSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(scocal(j, ng, rgk, a, d, bet, gam, maxtol, X, yallgroup, y, G, r, m, eta));
    return rcpp_result_gen;
END_RCPP
}
// soft2
double soft2(double s, double tau);
RcppExport SEXP _VEMIRT_soft2(SEXP sSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type s(sSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(soft2(s, tau));
    return rcpp_result_gen;
END_RCPP
}
// Mstep
List Mstep(int j, arma::rowvec ng, arma::mat rgk, arma::mat gra, arma::mat grd, arma::mat grbeta, arma::cube grgamma, double maxtol, arma::mat X, arma::mat yallgroup, int y, int G, int r, int m, int eta);
RcppExport SEXP _VEMIRT_Mstep(SEXP jSEXP, SEXP ngSEXP, SEXP rgkSEXP, SEXP graSEXP, SEXP grdSEXP, SEXP grbetaSEXP, SEXP grgammaSEXP, SEXP maxtolSEXP, SEXP XSEXP, SEXP yallgroupSEXP, SEXP ySEXP, SEXP GSEXP, SEXP rSEXP, SEXP mSEXP, SEXP etaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rgk(rgkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gra(graSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grd(grdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grbeta(grbetaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type grgamma(grgammaSEXP);
    Rcpp::traits::input_parameter< double >::type maxtol(maxtolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yallgroup(yallgroupSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type eta(etaSEXP);
    rcpp_result_gen = Rcpp::wrap(Mstep(j, ng, rgk, gra, grd, grbeta, grgamma, maxtol, X, yallgroup, y, G, r, m, eta));
    return rcpp_result_gen;
END_RCPP
}
// Mstepadapt
List Mstepadapt(int j, arma::rowvec ng, arma::mat rgk, arma::mat gra, arma::mat grd, arma::mat grbeta, arma::mat grbeta00, arma::cube grgamma, arma::cube grgamma00, double maxtol, arma::mat X, arma::mat yallgroup, int y, int G, int r, int m, int eta, int lam);
RcppExport SEXP _VEMIRT_Mstepadapt(SEXP jSEXP, SEXP ngSEXP, SEXP rgkSEXP, SEXP graSEXP, SEXP grdSEXP, SEXP grbetaSEXP, SEXP grbeta00SEXP, SEXP grgammaSEXP, SEXP grgamma00SEXP, SEXP maxtolSEXP, SEXP XSEXP, SEXP yallgroupSEXP, SEXP ySEXP, SEXP GSEXP, SEXP rSEXP, SEXP mSEXP, SEXP etaSEXP, SEXP lamSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type j(jSEXP);
    Rcpp::traits::input_parameter< arma::rowvec >::type ng(ngSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type rgk(rgkSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type gra(graSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grd(grdSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grbeta(grbetaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type grbeta00(grbeta00SEXP);
    Rcpp::traits::input_parameter< arma::cube >::type grgamma(grgammaSEXP);
    Rcpp::traits::input_parameter< arma::cube >::type grgamma00(grgamma00SEXP);
    Rcpp::traits::input_parameter< double >::type maxtol(maxtolSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type yallgroup(yallgroupSEXP);
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type G(GSEXP);
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< int >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< int >::type lam(lamSEXP);
    rcpp_result_gen = Rcpp::wrap(Mstepadapt(j, ng, rgk, gra, grd, grbeta, grbeta00, grgamma, grgamma00, maxtol, X, yallgroup, y, G, r, m, eta, lam));
    return rcpp_result_gen;
END_RCPP
}
// sampling
arma::cube sampling(const arma::mat& mu_i, const arma::cube& sig_i, const int& person, const int& domain, const int& S, const int& M);
RcppExport SEXP _VEMIRT_sampling(SEXP mu_iSEXP, SEXP sig_iSEXP, SEXP personSEXP, SEXP domainSEXP, SEXP SSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_i(mu_iSEXP);
    Rcpp::traits::input_parameter< const arma::cube& >::type sig_i(sig_iSEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const int& >::type domain(domainSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(sampling(mu_i, sig_i, person, domain, S, M));
    return rcpp_result_gen;
END_RCPP
}
// importance_weights
List importance_weights(const arma::cube theta_IS, const arma::mat& mu_i, const arma::cube sig_i, const arma::mat& a, const arma::vec& b, const arma::mat& Sigma_theta, const arma::mat& y, const int& person, const int& item, const int& S, const int& M);
RcppExport SEXP _VEMIRT_importance_weights(SEXP theta_ISSEXP, SEXP mu_iSEXP, SEXP sig_iSEXP, SEXP aSEXP, SEXP bSEXP, SEXP Sigma_thetaSEXP, SEXP ySEXP, SEXP personSEXP, SEXP itemSEXP, SEXP SSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cube >::type theta_IS(theta_ISSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mu_i(mu_iSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type sig_i(sig_iSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_theta(Sigma_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const int& >::type person(personSEXP);
    Rcpp::traits::input_parameter< const int& >::type item(itemSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(importance_weights(theta_IS, mu_i, sig_i, a, b, Sigma_theta, y, person, item, S, M));
    return rcpp_result_gen;
END_RCPP
}
// importance_gradient
List importance_gradient(const arma::mat& y, const arma::mat& a, const arma::vec& b, const arma::mat& Sigma_theta, const arma::cube theta_IS, const arma::mat& w_tilde, const int& S, const int& M);
RcppExport SEXP _VEMIRT_importance_gradient(SEXP ySEXP, SEXP aSEXP, SEXP bSEXP, SEXP Sigma_thetaSEXP, SEXP theta_ISSEXP, SEXP w_tildeSEXP, SEXP SSEXP, SEXP MSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Sigma_theta(Sigma_thetaSEXP);
    Rcpp::traits::input_parameter< const arma::cube >::type theta_IS(theta_ISSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type w_tilde(w_tildeSEXP);
    Rcpp::traits::input_parameter< const int& >::type S(SSEXP);
    Rcpp::traits::input_parameter< const int& >::type M(MSEXP);
    rcpp_result_gen = Rcpp::wrap(importance_gradient(y, a, b, Sigma_theta, theta_IS, w_tilde, S, M));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_VEMIRT_calcu_eta_", (DL_FUNC) &_VEMIRT_calcu_eta_, 6},
    {"_VEMIRT_update_sigma_i", (DL_FUNC) &_VEMIRT_update_sigma_i, 4},
    {"_VEMIRT_update_mu_i", (DL_FUNC) &_VEMIRT_update_mu_i, 7},
    {"_VEMIRT_ve_step", (DL_FUNC) &_VEMIRT_ve_step, 10},
    {"_VEMIRT_calcu_sigma_cmle_cpp", (DL_FUNC) &_VEMIRT_calcu_sigma_cmle_cpp, 3},
    {"_VEMIRT_update_ksi_ij", (DL_FUNC) &_VEMIRT_update_ksi_ij, 8},
    {"_VEMIRT_update_Aj_", (DL_FUNC) &_VEMIRT_update_Aj_, 8},
    {"_VEMIRT_update_Bj_", (DL_FUNC) &_VEMIRT_update_Bj_, 7},
    {"_VEMIRT_calcu_n2vlb_j", (DL_FUNC) &_VEMIRT_calcu_n2vlb_j, 10},
    {"_VEMIRT_calcu_n2vlb_0", (DL_FUNC) &_VEMIRT_calcu_n2vlb_0, 3},
    {"_VEMIRT_calcu_entro_", (DL_FUNC) &_VEMIRT_calcu_entro_, 3},
    {"_VEMIRT_vem_grm", (DL_FUNC) &_VEMIRT_vem_grm, 13},
    {"_VEMIRT_b2gamma", (DL_FUNC) &_VEMIRT_b2gamma, 2},
    {"_VEMIRT_gamma2b", (DL_FUNC) &_VEMIRT_gamma2b, 2},
    {"_VEMIRT_calcu_Fjr", (DL_FUNC) &_VEMIRT_calcu_Fjr, 5},
    {"_VEMIRT_calcu_Fjrp", (DL_FUNC) &_VEMIRT_calcu_Fjrp, 6},
    {"_VEMIRT_calcu_tid_wis", (DL_FUNC) &_VEMIRT_calcu_tid_wis, 8},
    {"_VEMIRT_calcu_grad_sig", (DL_FUNC) &_VEMIRT_calcu_grad_sig, 3},
    {"_VEMIRT_calcu_grad_A", (DL_FUNC) &_VEMIRT_calcu_grad_A, 5},
    {"_VEMIRT_calcu_grad_gam", (DL_FUNC) &_VEMIRT_calcu_grad_gam, 7},
    {"_VEMIRT_update_param", (DL_FUNC) &_VEMIRT_update_param, 10},
    {"_VEMIRT_gen_theta_is", (DL_FUNC) &_VEMIRT_gen_theta_is, 3},
    {"_VEMIRT_iwgvem_grm", (DL_FUNC) &_VEMIRT_iwgvem_grm, 19},
    {"_VEMIRT_ecfa2", (DL_FUNC) &_VEMIRT_ecfa2, 8},
    {"_VEMIRT_acfa2", (DL_FUNC) &_VEMIRT_acfa2, 10},
    {"_VEMIRT_lb2pl", (DL_FUNC) &_VEMIRT_lb2pl, 7},
    {"_VEMIRT_ea2", (DL_FUNC) &_VEMIRT_ea2, 7},
    {"_VEMIRT_ecfa3pl", (DL_FUNC) &_VEMIRT_ecfa3pl, 12},
    {"_VEMIRT_s3pl", (DL_FUNC) &_VEMIRT_s3pl, 11},
    {"_VEMIRT_eta3pl", (DL_FUNC) &_VEMIRT_eta3pl, 4},
    {"_VEMIRT_b3pl", (DL_FUNC) &_VEMIRT_b3pl, 12},
    {"_VEMIRT_acfa3", (DL_FUNC) &_VEMIRT_acfa3, 14},
    {"_VEMIRT_lb3pl", (DL_FUNC) &_VEMIRT_lb3pl, 14},
    {"_VEMIRT_eefa2", (DL_FUNC) &_VEMIRT_eefa2, 7},
    {"_VEMIRT_aefa2", (DL_FUNC) &_VEMIRT_aefa2, 8},
    {"_VEMIRT_paal2pl", (DL_FUNC) &_VEMIRT_paal2pl, 11},
    {"_VEMIRT_paalc22pl", (DL_FUNC) &_VEMIRT_paalc22pl, 12},
    {"_VEMIRT_paalc22pl1", (DL_FUNC) &_VEMIRT_paalc22pl1, 12},
    {"_VEMIRT_nalc12pl", (DL_FUNC) &_VEMIRT_nalc12pl, 8},
    {"_VEMIRT_palc12pl", (DL_FUNC) &_VEMIRT_palc12pl, 10},
    {"_VEMIRT_nalc22pl", (DL_FUNC) &_VEMIRT_nalc22pl, 10},
    {"_VEMIRT_palc22pl", (DL_FUNC) &_VEMIRT_palc22pl, 10},
    {"_VEMIRT_palc22pl1", (DL_FUNC) &_VEMIRT_palc22pl1, 11},
    {"_VEMIRT_eefa3", (DL_FUNC) &_VEMIRT_eefa3, 11},
    {"_VEMIRT_aefa3", (DL_FUNC) &_VEMIRT_aefa3, 13},
    {"_VEMIRT_paal3pl", (DL_FUNC) &_VEMIRT_paal3pl, 16},
    {"_VEMIRT_paalc23pl", (DL_FUNC) &_VEMIRT_paalc23pl, 15},
    {"_VEMIRT_paalc23pl1", (DL_FUNC) &_VEMIRT_paalc23pl1, 16},
    {"_VEMIRT_nalc13pl", (DL_FUNC) &_VEMIRT_nalc13pl, 13},
    {"_VEMIRT_palc13pl", (DL_FUNC) &_VEMIRT_palc13pl, 15},
    {"_VEMIRT_nalc23pl", (DL_FUNC) &_VEMIRT_nalc23pl, 15},
    {"_VEMIRT_palc23pl", (DL_FUNC) &_VEMIRT_palc23pl, 14},
    {"_VEMIRT_palc23pl1", (DL_FUNC) &_VEMIRT_palc23pl1, 15},
    {"_VEMIRT_sumoverk", (DL_FUNC) &_VEMIRT_sumoverk, 7},
    {"_VEMIRT_ngest", (DL_FUNC) &_VEMIRT_ngest, 4},
    {"_VEMIRT_rgkest", (DL_FUNC) &_VEMIRT_rgkest, 8},
    {"_VEMIRT_eigenMapMatMult", (DL_FUNC) &_VEMIRT_eigenMapMatMult, 2},
    {"_VEMIRT_dmvnrm2", (DL_FUNC) &_VEMIRT_dmvnrm2, 4},
    {"_VEMIRT_Estep1", (DL_FUNC) &_VEMIRT_Estep1, 16},
    {"_VEMIRT_scocal", (DL_FUNC) &_VEMIRT_scocal, 15},
    {"_VEMIRT_soft2", (DL_FUNC) &_VEMIRT_soft2, 2},
    {"_VEMIRT_Mstep", (DL_FUNC) &_VEMIRT_Mstep, 15},
    {"_VEMIRT_Mstepadapt", (DL_FUNC) &_VEMIRT_Mstepadapt, 18},
    {"_VEMIRT_sampling", (DL_FUNC) &_VEMIRT_sampling, 6},
    {"_VEMIRT_importance_weights", (DL_FUNC) &_VEMIRT_importance_weights, 11},
    {"_VEMIRT_importance_gradient", (DL_FUNC) &_VEMIRT_importance_gradient, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_VEMIRT(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
